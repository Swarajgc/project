#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns


# In[2]:


df = pd.read_csv('kc_house_data.csv')
df


# In[3]:


df.head()


# In[82]:


###Exploratory Data Analysis


# In[4]:


df.isnull().sum()


# In[5]:


df.describe().transpose()


# In[6]:


plt.figure(figsize= (10,6))
sns.displot(df['price'])


# In[7]:


sns.countplot(df['bedrooms'])


# In[8]:


df.corr()['price'].sort_values()


# In[9]:


plt.figure(figsize = (10,5))
sns.scatterplot(x = 'price',y = 'sqft_living', data = df)


# In[10]:


plt.figure(figsize = (10,5))
sns.boxplot(x = 'bedrooms', y = 'price', data = df)


# In[ ]:


###Geographical Properties


# In[11]:


plt.figure(figsize = (10,6))
sns.scatterplot(x = 'price', y = 'long', data = df)


# In[12]:


plt.figure(figsize= (10,6))
sns.scatterplot(x = 'price', y= 'lat', data = df)


# In[13]:


plt.figure(figsize=(10,6))
sns.scatterplot(x = 'long', y= 'lat', data=df)


# In[14]:


plt.figure(figsize=(10,6))
sns.scatterplot(x= 'long', y= 'lat', data = df)


# In[15]:


plt.figure(figsize=(10,6))
sns.scatterplot(x='long',y='lat',data=df,hue='price')


# In[16]:


df.sort_values('price',ascending=False).head(20)


# In[17]:


len(df)*(0.01)


# In[18]:


non_top_1_perc = df.sort_values('price',ascending=False).iloc[216:]


# In[19]:


plt.figure(figsize  =(12,8))
sns.scatterplot(x = 'long', y = 'lat', data=non_top_1_perc,hue = 'price',palette='RdYlGn',edgecolor=None,alpha=0.2)


# In[20]:


sns.boxplot(x='waterfront',y='price',data=df)


# In[21]:


df.head()


# In[22]:


df.info()


# In[ ]:


###Feature Engineering from Date


# In[23]:


df = df.drop('id', axis=1)


# In[24]:


df['date'] = pd.to_datetime(df['date'])


# In[25]:


df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month


# In[26]:


df.head()


# In[27]:


plt.figure(figsize=(10,6))
sns.boxplot(x='month',y='price',data=df)


# In[28]:


df.groupby('month').mean()['price'].plot()


# In[29]:


df.groupby('year').mean()['price'].plot()


# In[30]:


df = df.drop('date',axis=1)


# In[31]:


df.head()


# In[32]:


df.columns


# In[33]:


df['zipcode'].value_counts()


# In[34]:


df = df.drop('zipcode',axis=1)


# In[35]:


df.head()


# In[36]:


df['yr_renovated'].value_counts()


# In[37]:


df['sqft_basement'].value_counts()


# In[ ]:


###Scaling and Train Test Split


# In[50]:


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler


# In[51]:


X = df.drop('price', axis=1).values
y = df['price'].values


# In[52]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)


# In[53]:


scaler = MinMaxScaler()


# In[54]:


X_train = scaler.fit_transform(X_train)


# In[55]:


X_test = scaler.transform(X_test)


# In[ ]:


###Creating a Model


# In[56]:


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense


# In[57]:


model = Sequential()

model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))
model.add(Dense(19,activation='relu'))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mse')


# In[ ]:


###Training the Model


# In[58]:


model.fit(x=X_train,y=y_train,
         validation_data=(X_test,y_test),
         batch_size=128,epochs = 400)


# In[59]:


losses = pd.DataFrame(model.history.history)


# In[61]:


losses.plot()


# In[ ]:


###Evaluation on Test Data


# In[62]:


from sklearn.metrics import mean_absolute_error,mean_squared_error,explained_variance_score


# In[63]:


predictions = model.predict(X_test)


# In[65]:


mean_squared_error(y_test,predictions)


# In[66]:


np.sqrt(mean_squared_error(y_test,predictions))


# In[67]:


mean_absolute_error(y_test,predictions)


# In[68]:


df['price'].describe()


# In[69]:


5.400881e+05


# In[71]:


explained_variance_score(y_test,predictions)


# In[73]:


plt.figure(figsize = (12,6))
plt.scatter(y_test,predictions)

plt.plot(y_test,y_test,'r')


# In[81]:


###Prediction


# In[74]:


single_house = df.drop('price',axis=1).iloc[0]


# In[75]:


single_house


# In[76]:


single_house = scaler.transform(single_house.values.reshape(-1, 19))


# In[77]:


single_house


# In[78]:


model.predict(single_house)


# In[79]:


df.head(1)


# In[80]:


output = pd.DataFrame({'house prices':[predictions]})
output.to_csv('my_submission.csv',index=False)
print("your submission was sucessfully saved!!")


# In[ ]:




